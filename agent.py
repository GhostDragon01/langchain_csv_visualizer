import pandas as pd
import os
import re 
import sys
import matplotlib.pyplot as plt 
import streamlit as st

from io import StringIO, BytesIO
from langchain import OpenAI
from langchain.chat_models import ChatOpenAI
from langchain.agents import create_pandas_dataframe_agent
from pandasai import PandasAI



API_KEY = os.environ["OPENAI_API_KEY"]


def create_agent(df: pd.DataFrame):
    """
    Create an agent that can access and use a large language model (LLM).

    Args:
        filename: The path to the CSV file that contains the data.

    Returns:
        An agent that can access and use the LLM.
    """

    # Create an OpenAI object.
    llm = OpenAI(temperature=0.0, model_name='gpt-3.5-turbo', openai_api_key=API_KEY)

    # Create a Pandas DataFrame agent.
    return create_pandas_dataframe_agent(llm, df, verbose=True)

def summary_agent(df: pd.DataFrame):
    agent = create_agent(df)
    prompt =(
        """
        Write few lines of description of the csv file and then make a list of all the columns with a brieve description of each column and their dtype. 
        Here is an example with a macdonald.csv file :
        
        The McDonald's revenue dataset encompasses a collection of historical financial data from 1999 to 2023, offering a comprehensive overview 
        of the company's earnings over time. It provides detailed information on the revenue generated by McDonald's, reflecting the monetary value 
        of its sales and transactions within the specified period.
        
        Here is the list of columns with their description :
        - mcdo_id: unique identifier for each macdonald (int64) 
        - mcdo_employee_id: unique identifier for each macdonald employee (int64) 

        """
    )
    response = agent.run(prompt)
    return response 


def query_agent(agent, query):
    """
    Query an agent and return the response as a string.

    Args:
        agent: The agent to query.
        query: The query to ask the agent.

    Returns:
        The response from the agent as a string.
    """

    prompt = (
        """
            For the following query, if it requires drawing a table, reply as follows:
            {"table": {"columns": ["column1", "column2", ...], "data": [[value1, value2, ...], [value1, value2, ...], ...]}}

            If the query requires creating a bar chart, reply as follows:
            {"bar": {"columns": ["A", "B", "C", ...], "data": [25, 24, 10, ...]}}
            
            If the query requires creating a line chart, reply as follows:
            {"line": {"columns": ["A", "B", "C", ...], "data": [25, 24, 10, ...]}}
            
            There can only be two types of chart, "bar" and "line".
            
            If it is just asking a question that requires neither, reply as follows by giving the corresponding 
            code that gives the result if it exists and then you give the result just below it. Don't forget to add a newline between the two parts:
            {"answer": "answer and the code"}
            Example:
            {"answer": "The mean of the population is 54. Here is the code to get the result : df['population'].mean()"}
            
            If you do not know the answer, reply as follows:
            {"answer": "I do not know."}

            In all other cases, reply as follows: 
            { "answer": "the answer of the request"}
            
            Return all output as a string.
            
            All strings in "columns" list and data list, should be in double quotes,
            
            For example: {"columns": ["title", "ratings_count"], "data": [["Gilead", 361], ["Spider's Web", 5164]]}
            
            Lets think step by step.
            
            Below is the query.
            Query: 
            """
        + query
    )

    # Run the prompt through the agent.
    response = agent.run(prompt)

    # Convert the response to a string.
    return response.__str__()


# Pandas AI agent

def get_agent_response(self, uploaded_file_content, query):
        llm = OpenAI()
        pandas_ai = PandasAI(llm, verbose=True)
        old_stdout = sys.stdout
        sys.stdout = captured_output = StringIO()
        
        response = pandas_ai.run(data_frame = uploaded_file_content, prompt=query)
        fig = plt.gcf()
        if fig.get_axes():
            # Adjust the figure size
            fig.set_size_inches(12, 6)

            # Adjust the layout tightness
            plt.tight_layout()
            buf = BytesIO()
            fig.savefig(buf, format="png")
            buf.seek(0)
            st.image(buf, caption="Generated Plot")
        
        sys.stdout = old_stdout
        return response, captured_output

def process_agent_thoughts(self,captured_output):
    thoughts = captured_output.getvalue()
    cleaned_thoughts = re.sub(r'\x1b\[[0-9;]*[a-zA-Z]', '', thoughts)
    cleaned_thoughts = re.sub(r'\[1m>', '', cleaned_thoughts)
    return cleaned_thoughts

def display_agent_thoughts(self,cleaned_thoughts):
    with st.expander("Display the agent's thoughts"):
        st.write(cleaned_thoughts)
